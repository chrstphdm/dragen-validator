process.shell = ['/bin/bash', '-euo', 'pipefail']
process.cache = 'lenient'
nextflow.enable.dsl=2
includeConfig "config/lsf.config"
includeConfig 'config/base.config'
// process.executor = 'local'

params {

    today               = System.getenv('TODAY') // set by the wrapper
    data_root_path      = System.getenv('DATA_ROOT_PATH')
    results_root_path   = System.getenv('RESULTS_ROOT_PATH')
    dropbox_path        = System.getenv('DROPBOX_PATH')
    my_org_flags_path   = System.getenv('MY_ORG_FLAGS_PATH')
    provider_flags_path = System.getenv('PROVIDER_FLAGS_PATH')
    delivered_path      = System.getenv('DELIVERED_PATH')
    rejected_path       = System.getenv('REJECTED_PATH')

    delivery_list=""
    dry = (params.dry?params.dry:true) // default is a dry execution, to force user to set it to false
    debug = false

    dragen_validator_instance_id = "INSTANCE-${today}"
    dragen_validator_instance_path= "${results_root_path}/${params.dry?"DRY_":""}${dragen_validator_instance_id}"

    taps_output_folder="${dragen_validator_instance_path}/TAPS"
    tsv_output_folder="${dragen_validator_instance_path}/TSV"
    rsync_logs_output_folder="${dragen_validator_instance_path}/RSYNC_LOGS"

    // Max resource options
    max_memory                 = '256.GB'
    max_cpus                   = 32
    max_time                   = '72.h'
}

report {
    enabled = true
    file = "${params.dragen_validator_instance_path}/${params.today}.report.html"
}

dag {
    enabled = true
    file = "${params.dragen_validator_instance_path}/${params.today}.flowchart.html"
}

timeline {
    enabled = true
    file = "${params.dragen_validator_instance_path}/${params.today}.timeline.html"
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

includeConfig 'config/modules.config'